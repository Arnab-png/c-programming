Grading at Wed Nov 14 14:35:22 UTC 2018
Compiling deck.c -> deck.o
Compiling eval.c -> eval.o
Compiling cards.c -> cards.o
Linking eval.o, deck.o, cards.o, and our tester
Testing free_deck(deck_t *)
- Test passed
Testing add_card_to(deck_t *, card_t)
- Test passed
Testing add_empty_card(deck_t *)
- Test passed
Testing make_deck_exclude(deck_t *)
- Test passed
Testing build_remaining_deck(deck_t **, size_t)
Testing with 1 hand
Testing with 2 hands
Testing with 3 hands
Testing with 4 hands
Testing with 5 hands
Testing with 6 hands
- Test passed
Testing get_match_count(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==198== Memcheck, a memory error detector
==198== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==198== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==198== Command: ./tester gmc
==198== Parent PID: 197
==198== 
==198== Invalid read of size 4
==198==    at 0x403214: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==198==    by 0x400AB8: main (in /graderhome/work/c4prj1_deck/tester)
==198==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==198== 
==198== 
==198== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==198==  Access not within mapped region at address 0x0
==198==    at 0x403214: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==198==    by 0x400AB8: main (in /graderhome/work/c4prj1_deck/tester)
==198==  If you believe this happened as a result of a stack
==198==  overflow in your program's main thread (unlikely but
==198==  possible), you can try to increase the size of the
==198==  main thread stack using the --main-stacksize= flag.
==198==  The main thread stack size used in this run was 8388608.
==198== 
==198== HEAP SUMMARY:
==198==     in use at exit: 68 bytes in 7 blocks
==198==   total heap usage: 7 allocs, 0 frees, 68 bytes allocated
==198== 
==198== LEAK SUMMARY:
==198==    definitely lost: 4 bytes in 1 blocks
==198==    indirectly lost: 0 bytes in 0 blocks
==198==      possibly lost: 0 bytes in 0 blocks
==198==    still reachable: 64 bytes in 6 blocks
==198==         suppressed: 0 bytes in 0 blocks
==198== Rerun with --leak-check=full to see details of leaked memory
==198== 
==198== For counts of detected and suppressed errors, rerun with: -v
==198== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: B
